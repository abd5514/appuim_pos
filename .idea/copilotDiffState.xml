<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/pages/HomePage.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/pages/HomePage.java" />
              <option name="originalContent" value="package pages;&#10;&#10;import drivers.DriverManager;&#10;import io.appium.java_client.pagefactory.AndroidFindBy;&#10;import io.appium.java_client.pagefactory.AppiumFieldDecorator;&#10;import org.openqa.selenium.By;&#10;import org.openqa.selenium.StaleElementReferenceException;&#10;import org.openqa.selenium.WebElement;&#10;import org.openqa.selenium.support.PageFactory;&#10;import org.testng.Assert;&#10;import utils.ScrollUtils;&#10;&#10;import java.util.List;&#10;import java.util.Random;&#10;import java.util.regex.Matcher;&#10;import java.util.regex.Pattern;&#10;&#10;import static utils.SharedMethods.getRandomIndex;&#10;import static utils.WaitUtils.*;&#10;&#10;&#10;public class HomePage {&#10;    public HomePage() {&#10;        // Initialize page elements with AppiumFieldDecorator&#10;        PageFactory.initElements(new AppiumFieldDecorator(DriverManager.getDriver()), this);&#10;    }&#10;&#10;    @AndroidFindBy(xpath = &quot;//androidx.compose.ui.platform.ComposeView/android.view.View/android.view.View/android.view.View/android.view.View[2]/android.widget.Button&quot;)&#10;    public WebElement backBtn;&#10;    @AndroidFindBy(xpath = &quot;//androidx.compose.ui.platform.ComposeView/android.view.View/android.view.View/android.view.View/android.view.View[3]/android.view.View[1]/android.widget.Button&quot;)&#10;    public WebElement page1Btn;&#10;    @AndroidFindBy(xpath = &quot;//androidx.compose.ui.platform.ComposeView/android.view.View/android.view.View/android.view.View/android.view.View[3]/android.view.View[2]/android.widget.Button&quot;)&#10;    public WebElement page2Btn;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/doneBtn&quot;)&#10;    public WebElement doneBtn;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/fragment_menu&quot;)&#10;    public WebElement mainMenu;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/homeLayout&quot;)&#10;    public WebElement sideMenuHomePage;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/managerDashboardLayout&quot;)&#10;    public WebElement sideMenuDailySales;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/tabsLayout&quot;)&#10;    public WebElement dailySalesMainBanner;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/proceed&quot;)&#10;    public WebElement checkoutBtn;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/park&quot;)&#10;    public WebElement parkBtn;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/decline&quot;)&#10;    public WebElement voidBtn;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/okBtn&quot;)&#10;    public WebElement confirmVoidBtn;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/payBtn&quot;)&#10;    public WebElement payBtn;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/secondPaymentContainer&quot;)&#10;    public WebElement creditPaymentContainer;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/edittext&quot;)&#10;    public WebElement parkNoteTxt;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/sendBtn&quot;)&#10;    public WebElement parkNoteBtn;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/splitByValueBtn&quot;)&#10;    public WebElement splitByValueBtn;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/addPayment&quot;)&#10;    public WebElement addPaymentBtn;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/charge&quot;)&#10;    public WebElement chargeBtn;&#10;    @AndroidFindBy(xpath = &quot;(//android.widget.Button[@resource-id=\&quot;com.figment.pos.dev:id/charge\&quot;])[2]&quot;)&#10;    public WebElement newChargeBtn;&#10;    @AndroidFindBy(xpath = &quot;(//android.view.ViewGroup[@resource-id=\&quot;com.figment.pos.dev:id/container\&quot;])[2]&quot;)&#10;    public WebElement creditPaymentSplit;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/splitByItemBtn&quot;)&#10;    public WebElement splitByItemBtn;&#10;    @AndroidFindBy(xpath = &quot;//androidx.recyclerview.widget.RecyclerView[@resource-id='com.figment.pos.dev:id/productsRecyclerView']/android.view.ViewGroup&quot;)&#10;    public WebElement productsRecyclerView;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/header&quot;)&#10;    public WebElement dailySalesHeader;&#10;&#10;    public int min;&#10;    public int max;&#10;    public int before;&#10;    public int after;&#10;&#10;    public int getCartItemsCount() {&#10;        String cartItem = &quot;//androidx.recyclerview.widget.RecyclerView[@resource-id=\&quot;com.figment.pos.dev:id/cartItems\&quot;]/android.view.ViewGroup&quot;;&#10;        List&lt;WebElement&gt; items = DriverManager.getDriver().findElements(By.xpath(cartItem));&#10;        return items.size();&#10;    }&#10;&#10;    /**&#10;     * click a random order option.&#10;     */&#10;    public void clickAnyOfOrderOptions() {&#10;        String orderOptions = &quot;//androidx.recyclerview.widget.RecyclerView[@resource-id=\&quot;com.figment.pos.dev:id/orderOptions\&quot;]/android.view.ViewGroup&quot;;&#10;        List&lt;WebElement&gt; options = DriverManager.getDriver().findElements(By.xpath(orderOptions));&#10;        options.get(0).click();&#10;    }&#10;    /**&#10;     * Selects a random product category.&#10;     */&#10;    public void getAllProducts() throws InterruptedException {&#10;&#10;        List&lt;WebElement&gt; categories = DriverManager.getDriver().findElements(&#10;                By.xpath(&quot;//androidx.compose.ui.platform.ComposeView/android.view.View/android.view.View/android.view.View/android.view.View[1]/android.view.View/android.view.View&quot;)&#10;        );&#10;        if (categories.isEmpty()) {&#10;            System.out.println(&quot;No categories found.&quot;);&#10;            return;&#10;        }&#10;        WebElement chosen = categories.get(getRandomIndex(categories.size()));&#10;        if (chosen.isDisplayed()) {&#10;            chosen.click();&#10;            Thread.sleep(500);&#10;        }&#10;    }&#10;&#10;    /*new copilot code section start*/&#10;    public void handleVariantsAndModifiers() throws InterruptedException {&#10;        String itemXPath   = &quot;//androidx.recyclerview.widget.RecyclerView[@resource-id='com.figment.pos.dev:id/recyclerView']/android.view.ViewGroup&quot;;&#10;        String buttonXPath = &quot;//android.view.ViewGroup[@resource-id='com.figment.pos.dev:id/constraintLayout']&quot;;&#10;&#10;        List&lt;WebElement&gt; items = DriverManager.getDriver().findElements(By.xpath(itemXPath));&#10;        int markerItemIndex = -1;&#10;        min = 0;&#10;        max = 0;&#10;&#10;        for (int i = 0; i &lt; items.size(); i++) {&#10;            WebElement item = items.get(i);&#10;            for (WebElement tv : item.findElements(By.className(&quot;android.widget.TextView&quot;))) {&#10;                String text = tv.getText();&#10;                if (text.contains(&quot;Min:&quot;) &amp;&amp; text.contains(&quot;Max:&quot;)) {&#10;                    Matcher m = Pattern.compile(&quot;Min:\\s*(\\d+)\\s*\\|\\s*Max:\\s*(\\d+)&quot;).matcher(text);&#10;                    if (m.find()) {&#10;                        min = Integer.parseInt(m.group(1));&#10;                        max = Integer.parseInt(m.group(2));&#10;                        markerItemIndex = i;&#10;                        break;&#10;                    }&#10;                }&#10;            }&#10;            if (markerItemIndex &gt;= 0) break;&#10;        }&#10;&#10;        List&lt;WebElement&gt; allButtons = DriverManager.getDriver().findElements(By.xpath(buttonXPath));&#10;        int variantCount = markerItemIndex;&#10;&#10;        // Handle variants if present&#10;        if (variantCount &gt; 0 &amp;&amp; allButtons.size() &gt;= variantCount) {&#10;            int randomIdx = getRandomIndex(variantCount);&#10;            allButtons.get(randomIdx).click();&#10;            Thread.sleep(300);&#10;        } else {&#10;            System.out.println(&quot;No variants found for this product.&quot;);&#10;        }&#10;&#10;        // Handle modifiers if present&#10;        if (min &gt; 0 &amp;&amp; allButtons.size() &gt;= (variantCount + min)) {&#10;            for (int offset = 0; offset &lt; min; offset++) {&#10;                int globalIdx = variantCount + offset;&#10;                int tries = 0;&#10;                boolean clicked = false;&#10;                while (!clicked &amp;&amp; tries &lt; 6) {&#10;                    List&lt;WebElement&gt; buttons = DriverManager.getDriver().findElements(By.xpath(buttonXPath));&#10;                    if (buttons.size() &gt; globalIdx) {&#10;                        try {&#10;                            buttons.get(globalIdx).click();&#10;                            Thread.sleep(300);&#10;                            clicked = true;&#10;                        } catch (StaleElementReferenceException stale) {&#10;                            System.out.println(&quot;Stale, retry modifier #&quot; + (offset + 1));&#10;                        }&#10;                    } else {&#10;                        ScrollUtils.scrollDown(DriverManager.getDriver());&#10;                        Thread.sleep(300);&#10;                        tries++;&#10;                        System.out.println(&quot;Scrolling for modifier #&quot; + (offset + 1));&#10;                    }&#10;                }&#10;                if (!clicked) {&#10;                    System.out.println(&quot;Failed modifier #&quot; + (offset + 1));&#10;                    break;&#10;                }&#10;            }&#10;            doneBtn.click();&#10;        } else {&#10;            System.out.println(&quot;No modifiers required for this product.&quot;);&#10;        }&#10;    }&#10;    /*new copilot code section end*/&#10;&#10;    /**&#10;     * Entry point: select category and handle variants/modifiers.&#10;     */&#10;    public void Select() throws InterruptedException {&#10;        sideMenuHomePage.click();&#10;        try {&#10;            sideMenuHomePage.click();&#10;            if(!mainMenu.isDisplayed()) {&#10;                sideMenuHomePage.click();&#10;            }&#10;        } catch (Exception e) {&#10;            // If the main menu is not displayed, we assume we are already on the home page.&#10;            System.out.println(&quot;Main menu is not displayed, assuming we are on the home page.&quot;);&#10;        }&#10;        getWait(1);&#10;        getAllProducts();&#10;        if (backBtn.isDisplayed()) getAllProducts();&#10;        handleVariantsAndModifiers();&#10;        before = getCartItemsCount();&#10;        try {&#10;            doneBtn.click();&#10;        } catch (Exception ignored) {}&#10;        after = getCartItemsCount();&#10;        Assert.assertTrue(before&lt;=after);&#10;        clickAnyOfOrderOptions();&#10;        waitForVisibility(sideMenuDailySales);&#10;        sideMenuDailySales.click();&#10;        waitForVisibility(dailySalesHeader);&#10;        sideMenuHomePage.click();&#10;        try {&#10;            sideMenuHomePage.click();&#10;            if(!mainMenu.isDisplayed()) {&#10;                sideMenuHomePage.click();&#10;            }&#10;        } catch (Exception e) {&#10;            // If the main menu is not displayed, we assume we are already on the home page.&#10;            System.out.println(&quot;Main menu is not displayed, assuming we are on the home page.&quot;);&#10;        }&#10;        waitForVisibility(mainMenu);&#10;    }&#10;&#10;    public void parkOrder(String note) {&#10;        waitForVisibility(parkBtn);&#10;        parkBtn.click();&#10;        waitForVisibility(parkNoteTxt);&#10;        parkNoteTxt.sendKeys(note + &quot; &quot; + getRandomIndex(1000)); // Append a random number to the note&#10;        waitForVisibility(parkNoteBtn);&#10;        parkNoteBtn.click();&#10;    }&#10;&#10;    public void voidOrder() {&#10;        waitForVisibility(voidBtn);&#10;        voidBtn.click();&#10;        waitForVisibility(confirmVoidBtn);&#10;        confirmVoidBtn.click();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package pages;&#10;&#10;import drivers.DriverManager;&#10;import io.appium.java_client.pagefactory.AndroidFindBy;&#10;import io.appium.java_client.pagefactory.AppiumFieldDecorator;&#10;import org.openqa.selenium.By;&#10;import org.openqa.selenium.StaleElementReferenceException;&#10;import org.openqa.selenium.WebElement;&#10;import org.openqa.selenium.support.PageFactory;&#10;import org.testng.Assert;&#10;import utils.ScrollUtils;&#10;&#10;import java.util.List;&#10;import java.util.Random;&#10;import java.util.regex.Matcher;&#10;import java.util.regex.Pattern;&#10;&#10;import static utils.SharedMethods.getRandomIndex;&#10;import static utils.WaitUtils.*;&#10;&#10;&#10;public class HomePage {&#10;    public HomePage() {&#10;        // Initialize page elements with AppiumFieldDecorator&#10;        PageFactory.initElements(new AppiumFieldDecorator(DriverManager.getDriver()), this);&#10;    }&#10;&#10;    @AndroidFindBy(xpath = &quot;//androidx.compose.ui.platform.ComposeView/android.view.View/android.view.View/android.view.View/android.view.View[2]/android.widget.Button&quot;)&#10;    public WebElement backBtn;&#10;    @AndroidFindBy(xpath = &quot;//androidx.compose.ui.platform.ComposeView/android.view.View/android.view.View/android.view.View/android.view.View[3]/android.view.View[1]/android.widget.Button&quot;)&#10;    public WebElement page1Btn;&#10;    @AndroidFindBy(xpath = &quot;//androidx.compose.ui.platform.ComposeView/android.view.View/android.view.View/android.view.View/android.view.View[3]/android.view.View[2]/android.widget.Button&quot;)&#10;    public WebElement page2Btn;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/doneBtn&quot;)&#10;    public WebElement doneBtn;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/fragment_menu&quot;)&#10;    public WebElement mainMenu;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/homeLayout&quot;)&#10;    public WebElement sideMenuHomePage;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/managerDashboardLayout&quot;)&#10;    public WebElement sideMenuDailySales;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/tabsLayout&quot;)&#10;    public WebElement dailySalesMainBanner;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/proceed&quot;)&#10;    public WebElement checkoutBtn;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/park&quot;)&#10;    public WebElement parkBtn;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/decline&quot;)&#10;    public WebElement voidBtn;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/okBtn&quot;)&#10;    public WebElement confirmVoidBtn;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/payBtn&quot;)&#10;    public WebElement payBtn;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/secondPaymentContainer&quot;)&#10;    public WebElement creditPaymentContainer;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/edittext&quot;)&#10;    public WebElement parkNoteTxt;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/sendBtn&quot;)&#10;    public WebElement parkNoteBtn;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/splitByValueBtn&quot;)&#10;    public WebElement splitByValueBtn;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/addPayment&quot;)&#10;    public WebElement addPaymentBtn;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/charge&quot;)&#10;    public WebElement chargeBtn;&#10;    @AndroidFindBy(xpath = &quot;(//android.widget.Button[@resource-id=\&quot;com.figment.pos.dev:id/charge\&quot;])[2]&quot;)&#10;    public WebElement newChargeBtn;&#10;    @AndroidFindBy(xpath = &quot;(//android.view.ViewGroup[@resource-id=\&quot;com.figment.pos.dev:id/container\&quot;])[2]&quot;)&#10;    public WebElement creditPaymentSplit;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/splitByItemBtn&quot;)&#10;    public WebElement splitByItemBtn;&#10;    @AndroidFindBy(xpath = &quot;//androidx.recyclerview.widget.RecyclerView[@resource-id='com.figment.pos.dev:id/productsRecyclerView']/android.view.ViewGroup&quot;)&#10;    public WebElement productsRecyclerView;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/header&quot;)&#10;    public WebElement dailySalesHeader;&#10;&#10;    public int min;&#10;    public int max;&#10;    public int before;&#10;    public int after;&#10;&#10;    public int getCartItemsCount() {&#10;        String cartItem = &quot;//androidx.recyclerview.widget.RecyclerView[@resource-id=\&quot;com.figment.pos.dev:id/cartItems\&quot;]/android.view.ViewGroup&quot;;&#10;        List&lt;WebElement&gt; items = DriverManager.getDriver().findElements(By.xpath(cartItem));&#10;        return items.size();&#10;    }&#10;&#10;    /**&#10;     * click a random order option.&#10;     */&#10;    public void clickAnyOfOrderOptions() {&#10;        String orderOptions = &quot;//androidx.recyclerview.widget.RecyclerView[@resource-id=\&quot;com.figment.pos.dev:id/orderOptions\&quot;]/android.view.ViewGroup&quot;;&#10;        List&lt;WebElement&gt; options = DriverManager.getDriver().findElements(By.xpath(orderOptions));&#10;        options.get(0).click();&#10;    }&#10;    /**&#10;     * Selects a random product category.&#10;     */&#10;    public void getAllProducts() throws InterruptedException {&#10;&#10;        List&lt;WebElement&gt; categories = DriverManager.getDriver().findElements(&#10;                By.xpath(&quot;//androidx.compose.ui.platform.ComposeView/android.view.View/android.view.View/android.view.View/android.view.View[1]/android.view.View/android.view.View&quot;)&#10;        );&#10;        if (categories.isEmpty()) {&#10;            System.out.println(&quot;No categories found.&quot;);&#10;            return;&#10;        }&#10;        WebElement chosen = categories.get(getRandomIndex(categories.size()));&#10;        if (chosen.isDisplayed()) {&#10;            chosen.click();&#10;            Thread.sleep(500);&#10;        }&#10;    }&#10;&#10;    /*new copilot code section start*/&#10;    public void handleVariantsAndModifiers() throws InterruptedException {&#10;        String itemXPath   = &quot;//androidx.recyclerview.widget.RecyclerView[@resource-id='com.figment.pos.dev:id/recyclerView']/android.view.ViewGroup&quot;;&#10;        String buttonXPath = &quot;//android.view.ViewGroup[@resource-id='com.figment.pos.dev:id/constraintLayout']&quot;;&#10;&#10;        List&lt;WebElement&gt; items = DriverManager.getDriver().findElements(By.xpath(itemXPath));&#10;        int markerItemIndex = -1;&#10;        min = 0;&#10;        max = 0;&#10;&#10;        for (int i = 0; i &lt; items.size(); i++) {&#10;            WebElement item = items.get(i);&#10;            for (WebElement tv : item.findElements(By.className(&quot;android.widget.TextView&quot;))) {&#10;                String text = tv.getText();&#10;                if (text.contains(&quot;Min:&quot;) &amp;&amp; text.contains(&quot;Max:&quot;)) {&#10;                    Matcher m = Pattern.compile(&quot;Min:\\s*(\\d+)\\s*\\|\\s*Max:\\s*(\\d+)&quot;).matcher(text);&#10;                    if (m.find()) {&#10;                        min = Integer.parseInt(m.group(1));&#10;                        max = Integer.parseInt(m.group(2));&#10;                        markerItemIndex = i;&#10;                        break;&#10;                    }&#10;                }&#10;            }&#10;            if (markerItemIndex &gt;= 0) break;&#10;        }&#10;&#10;        List&lt;WebElement&gt; allButtons = DriverManager.getDriver().findElements(By.xpath(buttonXPath));&#10;        int variantCount = markerItemIndex;&#10;&#10;        // Handle variants if present&#10;        if (variantCount &gt; 0 &amp;&amp; allButtons.size() &gt;= variantCount) {&#10;            int randomIdx = getRandomIndex(variantCount);&#10;            allButtons.get(randomIdx).click();&#10;            Thread.sleep(300);&#10;        } else {&#10;            System.out.println(&quot;No variants found for this product.&quot;);&#10;        }&#10;&#10;        // Handle modifiers if present&#10;        if (min &gt; 0 &amp;&amp; allButtons.size() &gt;= (variantCount + min)) {&#10;            for (int offset = 0; offset &lt; min; offset++) {&#10;                int globalIdx = variantCount + offset;&#10;                int tries = 0;&#10;                boolean clicked = false;&#10;                while (!clicked &amp;&amp; tries &lt; 6) {&#10;                    List&lt;WebElement&gt; buttons = DriverManager.getDriver().findElements(By.xpath(buttonXPath));&#10;                    if (buttons.size() &gt; globalIdx) {&#10;                        try {&#10;                            buttons.get(globalIdx).click();&#10;                            Thread.sleep(300);&#10;                            clicked = true;&#10;                        } catch (StaleElementReferenceException stale) {&#10;                            System.out.println(&quot;Stale, retry modifier #&quot; + (offset + 1));&#10;                        }&#10;                    } else {&#10;                        ScrollUtils.scrollDown(DriverManager.getDriver());&#10;                        Thread.sleep(300);&#10;                        tries++;&#10;                        System.out.println(&quot;Scrolling for modifier #&quot; + (offset + 1));&#10;                    }&#10;                }&#10;                if (!clicked) {&#10;                    System.out.println(&quot;Failed modifier #&quot; + (offset + 1));&#10;                    break;&#10;                }&#10;            }&#10;            doneBtn.click();&#10;        } else {&#10;            System.out.println(&quot;No modifiers required for this product.&quot;);&#10;        }&#10;    }&#10;    /*new copilot code section end*/&#10;&#10;    /**&#10;     * Entry point: select category and handle variants/modifiers.&#10;     */&#10;    public void Select() throws InterruptedException {&#10;        sideMenuHomePage.click();&#10;        try {&#10;            sideMenuHomePage.click();&#10;            if(!mainMenu.isDisplayed()) {&#10;                sideMenuHomePage.click();&#10;            }&#10;        } catch (Exception e) {&#10;            // If the main menu is not displayed, we assume we are already on the home page.&#10;            System.out.println(&quot;Main menu is not displayed, assuming we are on the home page.&quot;);&#10;        }&#10;        getWait(1);&#10;        getAllProducts();&#10;        if (backBtn.isDisplayed()) getAllProducts();&#10;        handleVariantsAndModifiers();&#10;        before = getCartItemsCount();&#10;        try {&#10;            doneBtn.click();&#10;        } catch (Exception ignored) {}&#10;        after = getCartItemsCount();&#10;        Assert.assertTrue(before&lt;=after);&#10;        clickAnyOfOrderOptions();&#10;        waitForVisibility(sideMenuDailySales);&#10;        sideMenuDailySales.click();&#10;        waitForVisibility(dailySalesHeader);&#10;        sideMenuHomePage.click();&#10;        try {&#10;            sideMenuHomePage.click();&#10;            if(!mainMenu.isDisplayed()) {&#10;                sideMenuHomePage.click();&#10;            }&#10;        } catch (Exception e) {&#10;            // If the main menu is not displayed, we assume we are already on the home page.&#10;            System.out.println(&quot;Main menu is not displayed, assuming we are on the home page.&quot;);&#10;        }&#10;        waitForVisibility(mainMenu);&#10;    }&#10;&#10;    public void parkOrder(String note) {&#10;        waitForVisibility(parkBtn);&#10;        parkBtn.click();&#10;        waitForVisibility(parkNoteTxt);&#10;        parkNoteTxt.sendKeys(note + &quot; &quot; + getRandomIndex(1000)); // Append a random number to the note&#10;        waitForVisibility(parkNoteBtn);&#10;        parkNoteBtn.click();&#10;    }&#10;&#10;    public void voidOrder() {&#10;        waitForVisibility(voidBtn);&#10;        voidBtn.click();&#10;        waitForVisibility(confirmVoidBtn);&#10;        confirmVoidBtn.click();&#10;    }&#10;&#10;    public void checkoutOrder() {&#10;        waitForVisibility(checkoutBtn);&#10;        checkoutBtn.click();&#10;    }&#10;&#10;    public void splitByValue() {&#10;        waitForVisibility(splitByValueBtn);&#10;        splitByValueBtn.click();&#10;    }&#10;&#10;    public void splitByItem() {&#10;        waitForVisibility(splitByItemBtn);&#10;        splitByItemBtn.click();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/utils/SharedMethods.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/utils/SharedMethods.java" />
              <option name="originalContent" value="package utils;&#10;&#10;import drivers.DriverManager;&#10;import io.appium.java_client.pagefactory.AndroidFindBy;&#10;import io.appium.java_client.pagefactory.AppiumFieldDecorator;&#10;import org.openqa.selenium.WebElement;&#10;import org.openqa.selenium.support.PageFactory;&#10;&#10;import static utils.WaitUtils.*;&#10;&#10;import java.util.Random;&#10;&#10;public class SharedMethods {&#10;    // Utility for random index&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/okBtn&quot;)&#10;    public static WebElement confirmBtn;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/syncBtn&quot;)&#10;    public static WebElement syncBtn;&#10;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/checkoutBtn&quot;)&#10;    public WebElement checkoutBtn;&#10;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/splitByValueBtn&quot;)&#10;    public WebElement splitByValueBtn;&#10;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/splitByItemBtn&quot;)&#10;    public WebElement splitByItemBtn;&#10;&#10;    public SharedMethods() {&#10;        PageFactory.initElements(new AppiumFieldDecorator(DriverManager.getDriver()), this);&#10;    }&#10;    public static int getRandomIndex(int upperBound) {&#10;        return new Random().nextInt(upperBound);&#10;    }&#10;    &#10;    public void checkForSyncPopup() {&#10;        try {&#10;            waitForVisibility(confirmBtn);&#10;            confirmBtn.click();&#10;            waitForVisibility(syncBtn);&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;Sync popup not appeared, continuing without action.&quot;);&#10;        }&#10;    }&#10;&#10;    public void checkoutOrder() {&#10;        waitForVisibility(checkoutBtn);&#10;        checkoutBtn.click();&#10;        // Add any additional logic if needed&#10;    }&#10;&#10;    public void splitByValue() {&#10;        waitForVisibility(splitByValueBtn);&#10;        splitByValueBtn.click();&#10;        // Add any additional logic if needed&#10;    }&#10;&#10;    public void splitByItem() {&#10;        waitForVisibility(splitByItemBtn);&#10;        splitByItemBtn.click();&#10;        // Add any additional logic if needed&#10;    }&#10;}" />
              <option name="updatedContent" value="package utils;&#10;&#10;import drivers.DriverManager;&#10;import io.appium.java_client.pagefactory.AndroidFindBy;&#10;import io.appium.java_client.pagefactory.AppiumFieldDecorator;&#10;import org.openqa.selenium.WebElement;&#10;import org.openqa.selenium.support.PageFactory;&#10;&#10;import static utils.WaitUtils.*;&#10;&#10;import java.util.Random;&#10;&#10;public class SharedMethods {&#10;    // Utility for random index&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/okBtn&quot;)&#10;    public static WebElement confirmBtn;&#10;    @AndroidFindBy(id = &quot;com.figment.pos.dev:id/syncBtn&quot;)&#10;    public static WebElement syncBtn;&#10;&#10;    public SharedMethods() {&#10;        PageFactory.initElements(new AppiumFieldDecorator(DriverManager.getDriver()), this);&#10;    }&#10;    public static int getRandomIndex(int upperBound) {&#10;        return new Random().nextInt(upperBound);&#10;    }&#10;    &#10;    public void checkForSyncPopup() {&#10;        try {&#10;            waitForVisibility(confirmBtn);&#10;            confirmBtn.click();&#10;            waitForVisibility(syncBtn);&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;Sync popup not appeared, continuing without action.&quot;);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/tests/HomePageTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/tests/HomePageTest.java" />
              <option name="originalContent" value="package tests;&#10;&#10;import base.BaseTest;&#10;import org.testng.annotations.Listeners;&#10;import org.testng.annotations.Test;&#10;import pages.HomePage;&#10;import utils.ActionUtils;&#10;import utils.RetryAnalyzer;&#10;&#10;@Listeners(utils.TestListener.class)&#10;public class HomePageTest extends BaseTest {&#10;&#10;    @Test(retryAnalyzer = RetryAnalyzer.class)&#10;    public void checkoutOrder() throws Exception {&#10;        HomePage homePage = new HomePage();&#10;        ActionUtils.runMultipleTimes(3, homePage::Select);&#10;        homePage.checkoutOrder();&#10;    }&#10;&#10;    @Test(retryAnalyzer = RetryAnalyzer.class)&#10;    public void parkOrder() throws Exception {&#10;        HomePage homePage = new HomePage();&#10;        ActionUtils.runMultipleTimes(3, homePage::Select);&#10;        homePage.parkOrder(&quot;Test note for parking order&quot;);&#10;    }&#10;&#10;    @Test(retryAnalyzer = RetryAnalyzer.class)&#10;    public void voidOrder() throws Exception {&#10;        HomePage homePage = new HomePage();&#10;        ActionUtils.runMultipleTimes(3, homePage::Select);&#10;        homePage.voidOrder();&#10;    }&#10;&#10;    @Test(retryAnalyzer = RetryAnalyzer.class)&#10;    public void splitByValueOrder() throws Exception {&#10;        HomePage homePage = new HomePage();&#10;        ActionUtils.runMultipleTimes(3, homePage::Select);&#10;        homePage.splitByValue();&#10;    }&#10;&#10;    @Test(retryAnalyzer = RetryAnalyzer.class)&#10;    public void splitByItemOrder() throws Exception {&#10;        HomePage homePage = new HomePage();&#10;        ActionUtils.runMultipleTimes(3, homePage::Select);&#10;        homePage.splitByItem();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package tests;&#10;&#10;import base.BaseTest;&#10;import org.testng.annotations.Listeners;&#10;import org.testng.annotations.Test;&#10;import pages.HomePage;&#10;import utils.ActionUtils;&#10;import utils.RetryAnalyzer;&#10;&#10;@Listeners(utils.TestListener.class)&#10;public class HomePageTest extends BaseTest {&#10;&#10;    @Test(retryAnalyzer = RetryAnalyzer.class)&#10;    public void checkoutOrder() throws Exception {&#10;        HomePage homePage = new HomePage();&#10;        ActionUtils.runMultipleTimes(3, homePage::Select);&#10;        homePage.checkoutOrder();&#10;    }&#10;&#10;    @Test(retryAnalyzer = RetryAnalyzer.class)&#10;    public void parkOrder() throws Exception {&#10;        HomePage homePage = new HomePage();&#10;        ActionUtils.runMultipleTimes(3, homePage::Select);&#10;        homePage.parkOrder(&quot;Test note for parking order&quot;);&#10;    }&#10;&#10;    @Test(retryAnalyzer = RetryAnalyzer.class)&#10;    public void voidOrder() throws Exception {&#10;        HomePage homePage = new HomePage();&#10;        ActionUtils.runMultipleTimes(3, homePage::Select);&#10;        homePage.voidOrder();&#10;    }&#10;&#10;    @Test(retryAnalyzer = RetryAnalyzer.class)&#10;    public void splitByValueOrder() throws Exception {&#10;        HomePage homePage = new HomePage();&#10;        ActionUtils.runMultipleTimes(3, homePage::Select);&#10;        homePage.splitByValue();&#10;    }&#10;&#10;    @Test(retryAnalyzer = RetryAnalyzer.class)&#10;    public void splitByItemOrder() throws Exception {&#10;        HomePage homePage = new HomePage();&#10;        ActionUtils.runMultipleTimes(3, homePage::Select);&#10;        homePage.splitByItem();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>